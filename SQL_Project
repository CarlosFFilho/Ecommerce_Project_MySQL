-- criação do banco de dados para o cenário de E-commerce

create database ecommerce;

use ecommerce;


-- criação da tabela produto

create table product (
		product_id int auto_increment primary key,
        Fname varchar (10) not null,
        classification_kids bool default false,
        category enum ("Eletrônico", "Vestimenta", "Brinquedo", "Alimentos") not null,
        evaluation float default 0,
        size varchar(10));


-- criação da tabela cliente

create table client (
		id_client int auto_increment primary key,
        id_client_product int,
        Fname varchar (10),
        Minit char (3),
        Lname varchar (20),
        CPF char (11) not null,
        Address varchar (50),
        constraint unique_cpf_client unique (CPF),
        constraint fk_product_client foreign key (id_client_product) references product(product_id));


-- criação da tabela pagamentos

create table payments(
        id_payment int auto_increment primary key,
        id_client_payment int,
        type_payment enum ("Boleto", "Cartão", "Dois Cartões", "Pix"),
        limit_avaliable float,
        constraint fk_payments_client foreign key (id_client_payment) references client(id_client));


-- criação da tabela pedido
        
create table order_ (
		order_id int auto_increment primary key,
        id_order_client int,
        order_status enum ("Cancelado", "Confirmado", "Em processamento") default "Em processamento",
        order_description varchar(255),
        send_value float default 10,
        order_payment_id int,
        constraint fk_orders_client foreign key (id_order_client) references client(id_client));


-- criação da tabela estoque

create table product_storage (
		product_storage_id int auto_increment primary key,
        location varchar (100),
        quantity int default 0);


-- criação da tabela fornecedor

create table supplier (
		supplier_id int auto_increment primary key,
        social_name varchar (100) not null,
        cnpj char (15) not null,
        contact char (11) not null,
        constraint unique_supplier unique (cnpj));


-- criação da tabela vendedor

create table seller (
		seller_id int auto_increment primary key,
        social_name varchar (50) not null,
        abstract_name varchar (50),
        cnpj char (15),
        cpf char (9),
        location varchar (100),
        contact char (11) not null,
        constraint unique_cnpj unique (cnpj),
        constraint unique_cpf unique (cpf));


-- criação da tabela produtos vendidos

create table product_seller (
		product_seller_id int auto_increment primary key,
        id_product int,
        quantity int not null,
        constraint fk_product_seller foreign key (product_seller_id) references seller (seller_id),
        constraint fk_prod_seller foreign key (id_product) references product (product_id));


-- criação da tabela fornecedores dos produtos

create table product_supplier (
		product_supplier_id int auto_increment primary key,
        id_product int,
        quantity int not null,
        supplier_storage_id int,
        constraint fk_product_supplier foreign key (product_supplier_id) references supplier (supplier_id),
        constraint fk_suplier_product foreign key (id_product) references product (product_id),
        constraint fk_suplier_storage foreign key (supplier_storage_id) references product_storage (product_storage_id));


-- inserindo dados no banco de dados MySQL

use ecommerce;


-- tabela produto

INSERT INTO product (product_id, Fname, classification_kids, category, evaluation, size)
					VALUES (default, "Boneco", true, "Brinquedo", 8, "10cm"),
                    (default, "Fone", false, "Eletrônico", 9, null),
                    (default, "Tênis", false, "Vestimenta", 7, "43"),
                    (default, "pizza", false, "Alimentos", 9, "G"),
                    (default, "pulseira", true, "Vestimenta", 6, "P"),
                    (default, "Feijão", false, "Alimentos", 8, "1kg"),
                    (default, "Refri", false, "Alimentos", 9, "2L");


-- tabela cliente

INSERT INTO client (id_client, id_client_product, Fname, Minit, Lname, CPF, Address)
					VALUES (default, 4, "João", "M", "Oliveira", "123456789", "Rua A - Centro"),
                    (default, 6, "Danilo", "O", "Silva", "123778089", "Rua B - Centro"),
                    (default, 1, "Janaina", "F", "Santos", "987654321", "Rua C - Centro"),
                    (default, 7, "Lidia", "H", "Albuquerque", "112233445", "Rua D - Centro"),
                    (default, 3, "Everaldo", "M", "Lima", "123456715", "Rua E - Centro");


-- tabela pagamentos

INSERT INTO payments (id_payment, id_client_payment, type_payment, limit_avaliable)
					VALUES (default, 3, "Boleto", 1000),
                    (default, 2, "Pix", 500),
                    (default, 1, "Boleto", 700),
                    (default, 4, "Cartão", 900);


-- tabela ordem

INSERT INTO order_ (order_id, id_order_client, order_status, order_description, send_value, order_payment_id)
					VALUES (default, 4, "Cancelado", "Via app", 100, 6),
                    (default, 2, "Confirmado", "Na loja", 50, 8),
                    (default, 3, "Confirmado", "No site", 70, 5),
                    (default, 1, "Em processamento", "Via app", 90, 7);


-- tabela estoque

INSERT INTO product_storage (product_storage_id, location, quantity)
					VALUES (default, "Setor A1", 20),
                    (default, "Setor B3", 7),
                    (default, "Setor B2", 11),
                    (default, "Setor C1", 8);

                    
-- tabela fornecedores

INSERT INTO supplier (supplier_id, social_name, cnpj, contact)
					VALUES (default, "Ramos Comercial", "123456789012345", "00004444"),
                    (default, "Torres Comércio", "234567890123456", "00123456"),
                    (default, "B2 Atacadista", "345678901234567", "02347899"),
                    (default, "Soares LTDA", "456789012345678", "02007899");


-- tabela vendedores

INSERT INTO seller (seller_id, social_name, abstract_name, cnpj, cpf, location, contact)
					VALUES (default, "Reinaldo", "Naldo", null, "000004444", "São Paulo", "00000000"),
                    (default, "Anderson", "Dilson", null,  "001234506", "Porto Alegre", "00000880"),
                    (default, "Klever", "Klever", null, "023478990", "Maceió", "00000070"),
                    (default, "Marta", "Marta", null, "020078909", "Arapiraca", "01000000");


-- tabela produtos vendidos

INSERT INTO product_seller (product_seller_id, id_product, quantity)
					VALUES (default, 1, 2),
                    (default, 2, 1),
                    (default, 3, 4),
                    (default, 4, 1);


-- tabela de suprimento de produtos

INSERT INTO product_supplier (product_supplier_id, id_product, quantity, supplier_storage_id)
					VALUES (default, 1, 2, 2),
                    (default, 2, 1, 3),
                    (default, 3, 4, 4),
                    (default, 4, 1, 1);


-- Fazendo consultas no banco de dados

use ecommerce;


-- 1. Recuperações simples com SELECT Statement

SELECT Fname, category, evaluation FROM product;

SELECT Fname, CPF, Address FROM client;

SELECT Order_status, Send_value FROM order_;

SELECT product_storage_id, location, quantity FROM product_storage;

SELECT social_name, location FROM seller;


-- 2. Filtros com WHERE Statement

SELECT Fname, category, evaluation FROM product WHERE evaluation>=8;

SELECT Fname, CPF, Address FROM client WHERE Fname = "João";

SELECT Order_status, Send_value FROM order_ WHERE Order_status = "Confirmado";

SELECT product_storage_id, location, quantity FROM product_storage WHERE quantity<10;

SELECT social_name, location FROM seller WHERE location = "Maceió";


-- 3. Expressões para gerar atributos derivados

SELECT Fname, Lname, CONCAT(Fname," ", Lname) AS concatenate_columns FROM client;

SELECT evaluation, ((evaluation / 10)*100) AS percentual_evaluation FROM product;

SELECT limit_avaliable,
       CASE 
           WHEN limit_avaliable > 750 THEN 'Tall'
           WHEN limit_avaliable > 400 THEN 'Medium'
           ELSE 'Short'
       END AS classification_limits
FROM payments;


-- 4. Ordenações dos dados com ORDER BY

SELECT Fname, category, evaluation FROM product ORDER BY evaluation;

SELECT Fname, CPF, Address FROM client ORDER BY Fname;

SELECT Order_status, Send_value FROM order_ ORDER BY Send_value;

SELECT product_storage_id, location, quantity FROM product_storage ORDER BY quantity;

SELECT social_name, location FROM seller ORDER BY social_name;


-- 5. Condições de filtros aos grupos – HAVING Statement

SELECT Fname, category, evaluation FROM product
HAVING evaluation > 8;

SELECT product_storage_id, quantity FROM product_storage
HAVING quantity > 10;

SELECT Order_status, Send_value FROM order_
HAVING Send_value >= 90;


-- 6. Junções entre tabelas para fornecer uma perspectiva mais complexa dos dados

SELECT client.Fname, payments.type_payment FROM client
INNER JOIN payments ON client.id_client = payments.id_client_payment;

SELECT product.Fname, product_storage.location FROM product
INNER JOIN product_storage ON product.product_id = product_storage.product_storage_id;

SELECT product.Fname, product_seller.quantity FROM product
INNER JOIN product_seller ON product.product_id = product_seller.product_seller_id;
